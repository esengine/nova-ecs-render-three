{"version":3,"file":"index.js","sources":["../src/components/TransformComponent.ts","../src/components/ThreeMeshComponent.ts","../src/components/ThreeMaterialComponent.ts","../src/components/ThreeGeometryComponent.ts","../src/components/ThreeLightComponent.ts","../src/components/ThreeCameraComponent.ts","../src/systems/ThreeRenderSystem.ts","../src/adapters/index.ts","../src/materials/index.ts","../src/geometries/index.ts","../src/lights/index.ts","../src/cameras/index.ts","../src/index.ts"],"sourcesContent":["/**\n * Transform Component for Three.js Integration\n * Transform组件 - 用于Three.js集成\n */\n\nimport { Component } from '@esengine/nova-ecs';\n\nexport class TransformComponent extends Component {\n  constructor(\n    public position: { x: number; y: number; z: number } = { x: 0, y: 0, z: 0 },\n    public rotation: { x: number; y: number; z: number } = { x: 0, y: 0, z: 0 },\n    public scale: { x: number; y: number; z: number } = { x: 1, y: 1, z: 1 }\n  ) {\n    super();\n  }\n}","/**\n * Three.js Mesh Component - holds reference to Three.js mesh\n * Three.js网格组件 - 持有Three.js网格的引用\n */\n\nimport { Component } from '@esengine/nova-ecs';\nimport * as THREE from 'three';\n\nexport class ThreeMeshComponent extends Component {\n  public mesh: THREE.Mesh | null = null;\n  public needsUpdate: boolean = false;\n  \n  constructor(mesh?: THREE.Mesh) {\n    super();\n    this.mesh = mesh || null;\n  }\n\n  dispose(): void {\n    if (this.mesh) {\n      this.mesh.geometry?.dispose();\n      if (this.mesh.material) {\n        if (Array.isArray(this.mesh.material)) {\n          this.mesh.material.forEach(material => material.dispose());\n        } else {\n          this.mesh.material.dispose();\n        }\n      }\n      this.mesh = null;\n    }\n  }\n}","/**\n * Three.js Material Component - material configuration\n * Three.js材质组件 - 材质配置\n */\n\nimport { Component } from '@esengine/nova-ecs';\n\nexport class ThreeMaterialComponent extends Component {\n  public materialType: 'standard' | 'basic' | 'phong' | 'physical' | 'wireframe';\n  public color: string;\n  public metalness: number;\n  public roughness: number;\n  public emissive: string;\n  public emissiveIntensity: number;\n  public transparent: boolean;\n  public opacity: number;\n  public wireframe: boolean;\n  public texture?: string;\n  public needsUpdate: boolean = false;\n\n  constructor(config: Partial<ThreeMaterialComponent> = {}) {\n    super();\n    this.materialType = config.materialType || 'standard';\n    this.color = config.color || '#ffffff';\n    this.metalness = config.metalness || 0.0;\n    this.roughness = config.roughness || 1.0;\n    this.emissive = config.emissive || '#000000';\n    this.emissiveIntensity = config.emissiveIntensity || 0.0;\n    this.transparent = config.transparent || false;\n    this.opacity = config.opacity || 1.0;\n    this.wireframe = config.wireframe || false;\n    this.texture = config.texture;\n  }\n}","/**\n * Three.js Geometry Component - geometry configuration\n * Three.js几何体组件 - 几何体配置\n */\n\nimport { Component } from '@esengine/nova-ecs';\n\nexport class ThreeGeometryComponent extends Component {\n  public geometryType: 'box' | 'sphere' | 'plane' | 'cylinder' | 'cone' | 'torus' | 'custom';\n  public parameters: Record<string, number>;\n  public needsUpdate: boolean = false;\n\n  constructor(geometryType: string = 'box', parameters: Record<string, number> = {}) {\n    super();\n    this.geometryType = geometryType as any;\n    this.parameters = parameters;\n  }\n}","/**\n * Three.js Light Component - light configuration\n * Three.js光照组件 - 光照配置\n */\n\nimport { Component } from '@esengine/nova-ecs';\nimport * as THREE from 'three';\n\nexport class ThreeLightComponent extends Component {\n  public lightType: 'ambient' | 'directional' | 'point' | 'spot' | 'hemisphere';\n  public color: string;\n  public intensity: number;\n  public castShadow: boolean;\n  public light: THREE.Light | null = null;\n  public needsUpdate: boolean = false;\n\n  constructor(config: Partial<ThreeLightComponent> = {}) {\n    super();\n    this.lightType = config.lightType || 'directional';\n    this.color = config.color || '#ffffff';\n    this.intensity = config.intensity || 1.0;\n    this.castShadow = config.castShadow || false;\n  }\n}","/**\n * Three.js Camera Component - camera configuration\n * Three.js相机组件 - 相机配置\n */\n\nimport { Component } from '@esengine/nova-ecs';\nimport * as THREE from 'three';\n\nexport class ThreeCameraComponent extends Component {\n  public cameraType: 'perspective' | 'orthographic';\n  public fov: number;\n  public aspect: number;\n  public near: number;\n  public far: number;\n  public camera: THREE.Camera | null = null;\n  public needsUpdate: boolean = false;\n\n  constructor(config: Partial<ThreeCameraComponent> = {}) {\n    super();\n    this.cameraType = config.cameraType || 'perspective';\n    this.fov = config.fov || 75;\n    this.aspect = config.aspect || 1;\n    this.near = config.near || 0.1;\n    this.far = config.far || 1000;\n  }\n}","/**\n * Three.js Rendering System\n * Three.js渲染系统 - 基于ECS架构的Three.js渲染管理\n * \n * This system manages the rendering of 3D objects using Three.js library.\n * It processes entities with Transform and Three.js components to create\n * and update 3D meshes, lights, and cameras in the scene.\n * \n * 该系统使用Three.js库管理3D对象的渲染。\n * 它处理具有Transform和Three.js组件的实体，在场景中创建和更新3D网格、灯光和相机。\n * \n * @example\n * ```typescript\n * const renderSystem = new ThreeRenderSystem(canvas);\n * world.addSystem(renderSystem);\n * \n * const entity = world.createEntity()\n *   .addComponent(new TransformComponent())\n *   .addComponent(new ThreeMeshComponent())\n *   .addComponent(new ThreeMaterialComponent());\n * ```\n */\n\nimport { System, World, Entity } from '@esengine/nova-ecs';\nimport * as THREE from 'three';\nimport {\n  ThreeMeshComponent,\n  ThreeMaterialComponent,\n  ThreeGeometryComponent,\n  ThreeLightComponent,\n  ThreeCameraComponent,\n  TransformComponent\n} from '../components';\n\n/**\n * Three.js渲染系统配置选项\n * Three.js rendering system configuration options\n */\nexport interface ThreeRenderSystemOptions {\n  /** Canvas element for rendering 用于渲染的Canvas元素 */\n  canvas?: HTMLCanvasElement;\n  /** Enable shadows 启用阴影 */\n  enableShadows?: boolean;\n  /** Shadow map size 阴影贴图大小 */\n  shadowMapSize?: number;\n  /** Background color 背景颜色 */\n  backgroundColor?: number;\n  /** Enable antialiasing 启用抗锯齿 */\n  antialias?: boolean;\n}\n\n/**\n * Three.js Rendering System\n * Three.js渲染系统\n */\nexport class ThreeRenderSystem extends System {\n  // 公共属性\n  public readonly scene: THREE.Scene;\n  public readonly renderer: THREE.WebGLRenderer;\n  public camera!: THREE.Camera;\n\n  // 私有属性\n  private readonly _options: Required<ThreeRenderSystemOptions>;\n  private _isInitialized = false;\n  private _frameCount = 0;\n\n  // 常量\n  private static readonly DEFAULT_OPTIONS: Required<ThreeRenderSystemOptions> = {\n    canvas: undefined as any,\n    enableShadows: true,\n    shadowMapSize: 2048,\n    backgroundColor: 0x1a1a1a,\n    antialias: true\n  };\n\n  /**\n   * Initialize the Three.js rendering system\n   * 初始化Three.js渲染系统\n   * \n   * @param options - Configuration options 配置选项\n   */\n  constructor(options: ThreeRenderSystemOptions = {}) {\n    // 不指定required components，因为系统需要查询多种组件类型\n    super();\n    \n    this._options = { ...ThreeRenderSystem.DEFAULT_OPTIONS, ...options };\n    \n    // Initialize Three.js scene\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(this._options.backgroundColor);\n    \n    // Initialize renderer\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this._options.canvas,\n      antialias: this._options.antialias,\n      alpha: true,\n      preserveDrawingBuffer: false,\n      powerPreference: \"high-performance\"\n    });\n    \n    this._setupRenderer();\n    this._setupDefaultCamera();\n    this._setupWebGLContextHandlers();\n  }\n\n  /**\n   * System added to world lifecycle hook\n   * 系统添加到世界的生命周期钩子\n   */\n  onAddedToWorld(world: World): void {\n    super.onAddedToWorld(world);\n    \n    this._isInitialized = true;\n    console.log('ThreeRenderSystem: Added to world and initialized');\n  }\n\n  /**\n   * System removed from world lifecycle hook\n   * 系统从世界移除的生命周期钩子\n   */\n  onRemovedFromWorld(): void {\n    this._cleanup();\n    this._isInitialized = false;\n    \n    super.onRemovedFromWorld();\n    console.log('ThreeRenderSystem: Removed from world and cleaned up');\n  }\n\n  /**\n   * Update all renderable entities\n   * 更新所有可渲染实体\n   * \n   * @param entities - Entities passed by the ECS framework (unused in this system)\n   * @param deltaTime - Time elapsed since last update in milliseconds\n   */\n  update(entities: Entity[], deltaTime: number): void {\n    if (!this._isInitialized || !this.world) {\n      return;\n    }\n\n    try {\n      this._frameCount++;\n      \n      // Process different types of entities\n      this._processMeshEntities();\n      this._processLightEntities();\n      this._processCameraEntities();\n      \n      // Render the scene\n      this._render();\n      \n    } catch (error) {\n      console.error(`Error in ${this.constructor.name}.update:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Set renderer size\n   * 设置渲染器大小\n   */\n  setSize(width: number, height: number): void {\n    this.renderer.setSize(width, height);\n    \n    if (this.camera instanceof THREE.PerspectiveCamera) {\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n    }\n  }\n\n  /**\n   * Get render statistics\n   * 获取渲染统计信息\n   */\n  getStatistics(): { frameCount: number; meshCount: number; lightCount: number } {\n    let meshCount = 0;\n    let lightCount = 0;\n    \n    this.scene.traverse((object) => {\n      if (object instanceof THREE.Mesh) meshCount++;\n      if (object instanceof THREE.Light) lightCount++;\n    });\n\n    return {\n      frameCount: this._frameCount,\n      meshCount,\n      lightCount\n    };\n  }\n\n  // Private methods\n\n  /**\n   * Setup renderer configuration\n   * 设置渲染器配置\n   */\n  private _setupRenderer(): void {\n    this.renderer.setSize(800, 600);\n    \n    if (this._options.enableShadows) {\n      this.renderer.shadowMap.enabled = true;\n      this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    }\n    \n    this.renderer.outputColorSpace = THREE.SRGBColorSpace;\n    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    this.renderer.toneMappingExposure = 1.0;\n  }\n\n  /**\n   * Setup default camera\n   * 设置默认相机\n   */\n  private _setupDefaultCamera(): void {\n    this.camera = new THREE.PerspectiveCamera(75, 800/600, 0.1, 1000);\n    this.camera.position.set(5, 5, 5);\n    this.camera.lookAt(0, 0, 0);\n  }\n\n  /**\n   * Setup WebGL context handlers\n   * 设置WebGL上下文处理器\n   */\n  private _setupWebGLContextHandlers(): void {\n    if (!this.renderer.domElement) return;\n\n    this.renderer.domElement.addEventListener('webglcontextlost', (event) => {\n      console.warn('WebGL context lost');\n      event.preventDefault();\n    });\n\n    this.renderer.domElement.addEventListener('webglcontextrestored', () => {\n      console.log('WebGL context restored');\n      // Reinitialize if needed\n    });\n  }\n\n  /**\n   * Process entities with mesh components\n   * 处理具有网格组件的实体\n   */\n  private _processMeshEntities(): void {\n    if (!this.world) return;\n\n    // Query entities with required components for meshes\n    const meshEntities = this.world.entities.filter(entity => \n      entity.active && \n      entity.hasComponent(TransformComponent) && \n      entity.hasComponent(ThreeMeshComponent)\n    );\n\n    for (const entity of meshEntities) {\n      this._processMeshEntity(entity);\n    }\n  }\n\n  /**\n   * Process entities with light components\n   * 处理具有灯光组件的实体\n   */\n  private _processLightEntities(): void {\n    if (!this.world) return;\n\n    const lightEntities = this.world.entities.filter(entity => \n      entity.active && \n      entity.hasComponent(TransformComponent) && \n      entity.hasComponent(ThreeLightComponent)\n    );\n\n    for (const entity of lightEntities) {\n      this._processLightEntity(entity);\n    }\n  }\n\n  /**\n   * Process entities with camera components\n   * 处理具有相机组件的实体\n   */\n  private _processCameraEntities(): void {\n    if (!this.world) return;\n\n    const cameraEntities = this.world.entities.filter(entity => \n      entity.active && \n      entity.hasComponent(TransformComponent) && \n      entity.hasComponent(ThreeCameraComponent)\n    );\n\n    // Use first active camera entity\n    if (cameraEntities.length > 0) {\n      this._processCameraEntity(cameraEntities[0]);\n    }\n  }\n\n  /**\n   * Process individual mesh entity\n   * 处理单个网格实体\n   */\n  private _processMeshEntity(entity: Entity): void {\n    const transform = entity.getComponent(TransformComponent);\n    const meshComp = entity.getComponent(ThreeMeshComponent);\n    const materialComp = entity.getComponent(ThreeMaterialComponent);\n    const geometryComp = entity.getComponent(ThreeGeometryComponent);\n\n    if (!transform || !meshComp) return;\n\n    try {\n      // Create mesh if it doesn't exist\n      if (!meshComp.mesh) {\n        this._createMesh(entity, meshComp, materialComp, geometryComp);\n      }\n\n      // Update mesh transform\n      if (meshComp.mesh) {\n        this._updateMeshTransform(meshComp.mesh, transform);\n        \n        // Update material if needed\n        if (materialComp?.needsUpdate) {\n          this._updateMeshMaterial(meshComp.mesh, materialComp);\n          materialComp.needsUpdate = false;\n        }\n        \n        // Update geometry if needed\n        if (geometryComp?.needsUpdate) {\n          this._updateMeshGeometry(meshComp.mesh, geometryComp);\n          geometryComp.needsUpdate = false;\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing mesh entity ${entity.id}:`, error);\n    }\n  }\n\n  /**\n   * Process individual light entity\n   * 处理单个灯光实体\n   */\n  private _processLightEntity(entity: Entity): void {\n    const transform = entity.getComponent(TransformComponent);\n    const lightComp = entity.getComponent(ThreeLightComponent);\n\n    if (!transform || !lightComp) return;\n\n    try {\n      // Create light if it doesn't exist\n      if (!lightComp.light) {\n        this._createLight(lightComp);\n      }\n\n      // Update light transform and properties\n      if (lightComp.light) {\n        this._updateLightTransform(lightComp.light, transform);\n        \n        if (lightComp.needsUpdate) {\n          this._updateLightProperties(lightComp);\n          lightComp.needsUpdate = false;\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing light entity ${entity.id}:`, error);\n    }\n  }\n\n  /**\n   * Process individual camera entity\n   * 处理单个相机实体\n   */\n  private _processCameraEntity(entity: Entity): void {\n    const transform = entity.getComponent(TransformComponent);\n    const cameraComp = entity.getComponent(ThreeCameraComponent);\n\n    if (!transform || !cameraComp) return;\n\n    try {\n      // Create camera if it doesn't exist\n      if (!cameraComp.camera) {\n        this._createCamera(cameraComp);\n      }\n\n      // Update camera transform\n      if (cameraComp.camera) {\n        this._updateCameraTransform(cameraComp.camera, transform);\n        \n        // Use this camera for rendering\n        this.camera = cameraComp.camera;\n      }\n    } catch (error) {\n      console.error(`Error processing camera entity ${entity.id}:`, error);\n    }\n  }\n\n  /**\n   * Create Three.js mesh from components\n   * 从组件创建Three.js网格\n   */\n  private _createMesh(\n    entity: Entity, \n    meshComp: ThreeMeshComponent,\n    materialComp?: ThreeMaterialComponent,\n    geometryComp?: ThreeGeometryComponent\n  ): void {\n    const geometry = this._createGeometry(geometryComp);\n    const material = this._createMaterial(materialComp);\n    \n    meshComp.mesh = new THREE.Mesh(geometry, material);\n    meshComp.mesh.castShadow = true;\n    meshComp.mesh.receiveShadow = true;\n    meshComp.mesh.userData = { entityId: entity.id };\n    \n    this.scene.add(meshComp.mesh);\n  }\n\n  /**\n   * Create Three.js geometry from component\n   * 从组件创建Three.js几何体\n   */\n  private _createGeometry(geometryComp?: ThreeGeometryComponent): THREE.BufferGeometry {\n    if (!geometryComp) {\n      return new THREE.BoxGeometry(1, 1, 1);\n    }\n\n    const { geometryType, parameters } = geometryComp;\n    \n    switch (geometryType) {\n      case 'box':\n        return new THREE.BoxGeometry(\n          parameters.width || 1,\n          parameters.height || 1,\n          parameters.depth || 1\n        );\n      case 'sphere':\n        return new THREE.SphereGeometry(\n          parameters.radius || 0.5,\n          parameters.widthSegments || 16,\n          parameters.heightSegments || 12\n        );\n      case 'plane':\n        return new THREE.PlaneGeometry(\n          parameters.width || 1,\n          parameters.height || 1\n        );\n      case 'cylinder':\n        return new THREE.CylinderGeometry(\n          parameters.radiusTop || 0.5,\n          parameters.radiusBottom || 0.5,\n          parameters.height || 1,\n          parameters.radialSegments || 8\n        );\n      case 'cone':\n        return new THREE.ConeGeometry(\n          parameters.radius || 0.5,\n          parameters.height || 1,\n          parameters.radialSegments || 8\n        );\n      case 'torus':\n        return new THREE.TorusGeometry(\n          parameters.radius || 0.4,\n          parameters.tube || 0.2,\n          parameters.radialSegments || 8,\n          parameters.tubularSegments || 6\n        );\n      default:\n        return new THREE.BoxGeometry(1, 1, 1);\n    }\n  }\n\n  /**\n   * Create Three.js material from component\n   * 从组件创建Three.js材质\n   */\n  private _createMaterial(materialComp?: ThreeMaterialComponent): THREE.Material {\n    if (!materialComp) {\n      return new THREE.MeshStandardMaterial({ color: 0x4CAF50 });\n    }\n\n    const config = {\n      color: new THREE.Color(materialComp.color),\n      transparent: materialComp.transparent,\n      opacity: materialComp.opacity,\n      wireframe: materialComp.wireframe\n    };\n\n    switch (materialComp.materialType) {\n      case 'standard':\n        return new THREE.MeshStandardMaterial({\n          ...config,\n          metalness: materialComp.metalness,\n          roughness: materialComp.roughness,\n          emissive: new THREE.Color(materialComp.emissive),\n          emissiveIntensity: materialComp.emissiveIntensity\n        });\n      case 'basic':\n        return new THREE.MeshBasicMaterial(config);\n      case 'phong':\n        return new THREE.MeshPhongMaterial({\n          ...config,\n          shininess: (1.0 - materialComp.roughness) * 100\n        });\n      case 'physical':\n        return new THREE.MeshPhysicalMaterial({\n          ...config,\n          metalness: materialComp.metalness,\n          roughness: materialComp.roughness,\n          emissive: new THREE.Color(materialComp.emissive),\n          emissiveIntensity: materialComp.emissiveIntensity\n        });\n      case 'wireframe':\n        return new THREE.MeshBasicMaterial({\n          ...config,\n          wireframe: true\n        });\n      default:\n        return new THREE.MeshStandardMaterial(config);\n    }\n  }\n\n  /**\n   * Create Three.js light from component\n   * 从组件创建Three.js灯光\n   */\n  private _createLight(lightComp: ThreeLightComponent): void {\n    switch (lightComp.lightType) {\n      case 'ambient':\n        lightComp.light = new THREE.AmbientLight(lightComp.color, lightComp.intensity);\n        break;\n      case 'directional':\n        lightComp.light = new THREE.DirectionalLight(lightComp.color, lightComp.intensity);\n        if (this._options.enableShadows) {\n          (lightComp.light as THREE.DirectionalLight).castShadow = lightComp.castShadow;\n        }\n        break;\n      case 'point':\n        lightComp.light = new THREE.PointLight(lightComp.color, lightComp.intensity);\n        if (this._options.enableShadows) {\n          (lightComp.light as THREE.PointLight).castShadow = lightComp.castShadow;\n        }\n        break;\n      case 'spot':\n        lightComp.light = new THREE.SpotLight(lightComp.color, lightComp.intensity);\n        if (this._options.enableShadows) {\n          (lightComp.light as THREE.SpotLight).castShadow = lightComp.castShadow;\n        }\n        break;\n      case 'hemisphere':\n        lightComp.light = new THREE.HemisphereLight(lightComp.color, '#404040', lightComp.intensity);\n        break;\n      default:\n        lightComp.light = new THREE.DirectionalLight(lightComp.color, lightComp.intensity);\n    }\n    \n    this.scene.add(lightComp.light);\n  }\n\n  /**\n   * Create Three.js camera from component\n   * 从组件创建Three.js相机\n   */\n  private _createCamera(cameraComp: ThreeCameraComponent): void {\n    if (cameraComp.cameraType === 'perspective') {\n      cameraComp.camera = new THREE.PerspectiveCamera(\n        cameraComp.fov,\n        cameraComp.aspect,\n        cameraComp.near,\n        cameraComp.far\n      );\n    } else {\n      const size = 10;\n      cameraComp.camera = new THREE.OrthographicCamera(\n        -size * cameraComp.aspect,\n        size * cameraComp.aspect,\n        size,\n        -size,\n        cameraComp.near,\n        cameraComp.far\n      );\n    }\n  }\n\n  /**\n   * Update mesh transform from component\n   * 从组件更新网格变换\n   */\n  private _updateMeshTransform(mesh: THREE.Mesh, transform: TransformComponent): void {\n    mesh.position.set(\n      transform.position.x,\n      transform.position.y,\n      transform.position.z\n    );\n    mesh.rotation.set(\n      transform.rotation.x * Math.PI / 180,\n      transform.rotation.y * Math.PI / 180,\n      transform.rotation.z * Math.PI / 180\n    );\n    mesh.scale.set(\n      transform.scale.x,\n      transform.scale.y,\n      transform.scale.z\n    );\n  }\n\n  /**\n   * Update light transform from component\n   * 从组件更新灯光变换\n   */\n  private _updateLightTransform(light: THREE.Light, transform: TransformComponent): void {\n    light.position.set(\n      transform.position.x,\n      transform.position.y,\n      transform.position.z\n    );\n  }\n\n  /**\n   * Update camera transform from component\n   * 从组件更新相机变换\n   */\n  private _updateCameraTransform(camera: THREE.Camera, transform: TransformComponent): void {\n    camera.position.set(\n      transform.position.x,\n      transform.position.y,\n      transform.position.z\n    );\n    camera.rotation.set(\n      transform.rotation.x * Math.PI / 180,\n      transform.rotation.y * Math.PI / 180,\n      transform.rotation.z * Math.PI / 180\n    );\n  }\n\n  /**\n   * Update mesh material\n   * 更新网格材质\n   */\n  private _updateMeshMaterial(mesh: THREE.Mesh, materialComp: ThreeMaterialComponent): void {\n    const newMaterial = this._createMaterial(materialComp);\n    \n    // Dispose old material\n    if (mesh.material) {\n      if (Array.isArray(mesh.material)) {\n        mesh.material.forEach(mat => mat.dispose());\n      } else {\n        mesh.material.dispose();\n      }\n    }\n    \n    mesh.material = newMaterial;\n  }\n\n  /**\n   * Update mesh geometry\n   * 更新网格几何体\n   */\n  private _updateMeshGeometry(mesh: THREE.Mesh, geometryComp: ThreeGeometryComponent): void {\n    const newGeometry = this._createGeometry(geometryComp);\n    \n    // Dispose old geometry\n    mesh.geometry.dispose();\n    mesh.geometry = newGeometry;\n  }\n\n  /**\n   * Update light properties\n   * 更新灯光属性\n   */\n  private _updateLightProperties(lightComp: ThreeLightComponent): void {\n    if (!lightComp.light) return;\n\n    lightComp.light.color.setHex(parseInt(lightComp.color.replace('#', '0x')));\n    lightComp.light.intensity = lightComp.intensity;\n    \n    if ('castShadow' in lightComp.light) {\n      (lightComp.light as any).castShadow = lightComp.castShadow;\n    }\n  }\n\n  /**\n   * Render the scene\n   * 渲染场景\n   */\n  private _render(): void {\n    if (!this.renderer || !this.scene || !this.camera) {\n      console.warn('ThreeRenderSystem: Missing renderer, scene, or camera');\n      return;\n    }\n    \n    this.renderer.render(this.scene, this.camera);\n  }\n\n  /**\n   * Public render method for external use\n   * 公共的渲染方法供外部调用\n   */\n  render(): void {\n    this._render();\n  }\n\n  /**\n   * Public dispose method for external cleanup\n   * 公共的清理方法供外部调用\n   */\n  dispose(): void {\n    this._cleanup();\n  }\n\n  /**\n   * Cleanup resources\n   * 清理资源\n   */\n  private _cleanup(): void {\n    // Dispose of Three.js resources\n    this.scene.traverse((object) => {\n      if (object instanceof THREE.Mesh) {\n        object.geometry?.dispose();\n        if (object.material) {\n          if (Array.isArray(object.material)) {\n            object.material.forEach(material => material.dispose());\n          } else {\n            object.material.dispose();\n          }\n        }\n      }\n    });\n    \n    // Clear scene\n    while(this.scene.children.length > 0) {\n      this.scene.remove(this.scene.children[0]);\n    }\n    \n    // Dispose renderer\n    this.renderer.dispose();\n  }\n}","/**\r\n * Three.js Editor Adapters\r\n * Three.js编辑器适配器 - 连接编辑器与Three.js渲染系统\r\n */\r\n\r\nimport { World, Entity, Component } from '@esengine/nova-ecs';\r\nimport { ThreeRenderSystem } from '../systems';\r\nimport {\r\n  ThreeMeshComponent,\r\n  ThreeMaterialComponent,\r\n  ThreeGeometryComponent,\r\n  ThreeLightComponent,\r\n  TransformComponent\r\n} from '../components';\r\n\r\n// MeshRendererComponent for compatibility\r\nexport class MeshRendererComponent extends Component {\r\n  constructor(\r\n    public material: string = 'DefaultMaterial',\r\n    public castShadows: boolean = true,\r\n    public receiveShadows: boolean = true,\r\n    public meshType: 'box' | 'sphere' | 'plane' | 'custom' = 'box'\r\n  ) {\r\n    super();\r\n  }\r\n}\r\n\r\n/**\r\n * Editor Bridge for Three.js integration\r\n * 编辑器桥接器 - 用于Three.js集成\r\n */\r\nexport class ThreeEditorBridge {\r\n  private world: World;\r\n  private renderSystem: ThreeRenderSystem;\r\n\r\n  constructor(world: World, canvas: HTMLCanvasElement) {\r\n    this.world = world;\r\n    this.renderSystem = new ThreeRenderSystem({ canvas });\r\n    \r\n    // Add render system to world\r\n    this.world.addSystem(this.renderSystem);\r\n  }\r\n\r\n  /**\r\n   * Convert standard ECS entity to Three.js renderable entity\r\n   * 将标准ECS实体转换为Three.js可渲染实体\r\n   */\r\n  convertEntityToThreeJS(entity: Entity, materialName?: string, geometryType?: string): void {\r\n    // Add Three.js mesh component\r\n    const meshComponent = new ThreeMeshComponent();\r\n    entity.addComponent(meshComponent);\r\n\r\n    // Add material component based on material name\r\n    if (materialName) {\r\n      const materialComponent = this.createMaterialFromName(materialName);\r\n      entity.addComponent(materialComponent);\r\n    } else {\r\n      // Default material\r\n      const materialComponent = new ThreeMaterialComponent({\r\n        materialType: 'standard',\r\n        color: '#4CAF50',\r\n        metalness: 0.2,\r\n        roughness: 0.8\r\n      });\r\n      entity.addComponent(materialComponent);\r\n    }\r\n\r\n    // Add geometry component based on geometry type\r\n    if (geometryType) {\r\n      const geometryComponent = this.createGeometryFromType(geometryType);\r\n      entity.addComponent(geometryComponent);\r\n    } else {\r\n      // Default geometry\r\n      const geometryComponent = new ThreeGeometryComponent('box', {\r\n        width: 1,\r\n        height: 1,\r\n        depth: 1\r\n      });\r\n      entity.addComponent(geometryComponent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create material component from material name\r\n   * 根据材质名称创建材质组件\r\n   */\r\n  private createMaterialFromName(materialName: string): ThreeMaterialComponent {\r\n    const materialConfigs: Record<string, Partial<ThreeMaterialComponent>> = {\r\n      'DefaultMaterial': {\r\n        materialType: 'standard',\r\n        color: '#4CAF50',\r\n        metalness: 0.2,\r\n        roughness: 0.8\r\n      },\r\n      'MetalMaterial': {\r\n        materialType: 'standard',\r\n        color: '#9E9E9E',\r\n        metalness: 0.9,\r\n        roughness: 0.1\r\n      },\r\n      'PlasticMaterial': {\r\n        materialType: 'standard',\r\n        color: '#2196F3',\r\n        metalness: 0.0,\r\n        roughness: 0.9\r\n      },\r\n      'GlassMaterial': {\r\n        materialType: 'physical',\r\n        color: '#E3F2FD',\r\n        metalness: 0.0,\r\n        roughness: 0.0,\r\n        transparent: true,\r\n        opacity: 0.3\r\n      },\r\n      'EnemyMaterial': {\r\n        materialType: 'standard',\r\n        color: '#F44336',\r\n        metalness: 0.3,\r\n        roughness: 0.7\r\n      },\r\n      'GroundMaterial': {\r\n        materialType: 'standard',\r\n        color: '#795548',\r\n        metalness: 0.1,\r\n        roughness: 0.9\r\n      },\r\n      'WireframeMaterial': {\r\n        materialType: 'wireframe',\r\n        color: '#FFC107',\r\n        wireframe: true\r\n      },\r\n      'EmissiveMaterial': {\r\n        materialType: 'standard',\r\n        color: '#000000',\r\n        emissive: '#FF5722',\r\n        emissiveIntensity: 0.5,\r\n        metalness: 0.0,\r\n        roughness: 1.0\r\n      }\r\n    };\r\n\r\n    const config = materialConfigs[materialName] || materialConfigs['DefaultMaterial'];\r\n    return new ThreeMaterialComponent(config);\r\n  }\r\n\r\n  /**\r\n   * Create geometry component from geometry type\r\n   * 根据几何体类型创建几何体组件\r\n   */\r\n  private createGeometryFromType(geometryType: string): ThreeGeometryComponent {\r\n    const geometryConfigs: Record<string, { type: string; parameters: Record<string, number> }> = {\r\n      'box': {\r\n        type: 'box',\r\n        parameters: { width: 1, height: 1, depth: 1 }\r\n      },\r\n      'sphere': {\r\n        type: 'sphere',\r\n        parameters: { radius: 0.5, widthSegments: 16, heightSegments: 12 }\r\n      },\r\n      'plane': {\r\n        type: 'plane',\r\n        parameters: { width: 1, height: 1 }\r\n      },\r\n      'cylinder': {\r\n        type: 'cylinder',\r\n        parameters: { radiusTop: 0.5, radiusBottom: 0.5, height: 1, radialSegments: 8 }\r\n      },\r\n      'cone': {\r\n        type: 'cone',\r\n        parameters: { radius: 0.5, height: 1, radialSegments: 8 }\r\n      },\r\n      'torus': {\r\n        type: 'torus',\r\n        parameters: { radius: 0.4, tube: 0.2, radialSegments: 8, tubularSegments: 6 }\r\n      }\r\n    };\r\n\r\n    const config = geometryConfigs[geometryType] || geometryConfigs['box'];\r\n    return new ThreeGeometryComponent(config.type, config.parameters);\r\n  }\r\n\r\n  /**\r\n   * Add default lighting to scene\r\n   * 为场景添加默认光照\r\n   */\r\n  addDefaultLighting(): void {\r\n    // Ambient light\r\n    const ambientLight = this.world.createEntity();\r\n    ambientLight.addComponent(new TransformComponent());\r\n    ambientLight.addComponent(new ThreeLightComponent({\r\n      lightType: 'ambient',\r\n      color: '#404040',\r\n      intensity: 0.3\r\n    }));\r\n\r\n    // Main directional light\r\n    const mainLight = this.world.createEntity();\r\n    mainLight.addComponent(new TransformComponent(\r\n      { x: 10, y: 10, z: 5 },\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 1, y: 1, z: 1 }\r\n    ));\r\n    mainLight.addComponent(new ThreeLightComponent({\r\n      lightType: 'directional',\r\n      color: '#ffffff',\r\n      intensity: 1.0,\r\n      castShadow: true\r\n    }));\r\n\r\n    // Fill light\r\n    const fillLight = this.world.createEntity();\r\n    fillLight.addComponent(new TransformComponent(\r\n      { x: -5, y: 5, z: -5 },\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 1, y: 1, z: 1 }\r\n    ));\r\n    fillLight.addComponent(new ThreeLightComponent({\r\n      lightType: 'directional',\r\n      color: '#4080ff',\r\n      intensity: 0.3\r\n    }));\r\n\r\n    // Point light for atmosphere\r\n    const pointLight = this.world.createEntity();\r\n    pointLight.addComponent(new TransformComponent(\r\n      { x: 0, y: 5, z: 0 },\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 1, y: 1, z: 1 }\r\n    ));\r\n    pointLight.addComponent(new ThreeLightComponent({\r\n      lightType: 'point',\r\n      color: '#ff8040',\r\n      intensity: 0.2\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Get the Three.js renderer for external use\r\n   * 获取Three.js渲染器供外部使用\r\n   */\r\n  getRenderer(): ThreeRenderSystem {\r\n    return this.renderSystem;\r\n  }\r\n\r\n  /**\r\n   * Get the Three.js scene for external access\r\n   * 获取Three.js场景供外部访问\r\n   */\r\n  getScene() {\r\n    return this.renderSystem.scene;\r\n  }\r\n\r\n  /**\r\n   * Get the Three.js camera\r\n   * 获取Three.js相机\r\n   */\r\n  getCamera() {\r\n    return this.renderSystem.camera;\r\n  }\r\n\r\n  /**\r\n   * Resize the renderer\r\n   * 调整渲染器大小\r\n   */\r\n  resize(width: number, height: number): void {\r\n    this.renderSystem.setSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * Add default test objects to the scene\r\n   * 添加默认的测试对象到场景中\r\n   */\r\n  addDefaultTestObjects(): void {\r\n    // Create a test cube\r\n    const testCube = this.world.createEntity();\r\n    testCube.addComponent(new TransformComponent(\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 1, y: 1, z: 1 }\r\n    ));\r\n    testCube.addComponent(new ThreeMeshComponent());\r\n    testCube.addComponent(new ThreeMaterialComponent({\r\n      materialType: 'standard',\r\n      color: '#4CAF50',\r\n      metalness: 0.2,\r\n      roughness: 0.8\r\n    }));\r\n    testCube.addComponent(new ThreeGeometryComponent('box', {\r\n      width: 1,\r\n      height: 1,\r\n      depth: 1\r\n    }));\r\n\r\n    // Create a test sphere\r\n    const testSphere = this.world.createEntity();\r\n    testSphere.addComponent(new TransformComponent(\r\n      { x: 2, y: 0, z: 0 },\r\n      { x: 0, y: 0, z: 0 },\r\n      { x: 1, y: 1, z: 1 }\r\n    ));\r\n    testSphere.addComponent(new ThreeMeshComponent());\r\n    testSphere.addComponent(new ThreeMaterialComponent({\r\n      materialType: 'standard',\r\n      color: '#2196F3',\r\n      metalness: 0.1,\r\n      roughness: 0.3\r\n    }));\r\n    testSphere.addComponent(new ThreeGeometryComponent('sphere', {\r\n      radius: 0.5,\r\n      widthSegments: 32,\r\n      heightSegments: 16\r\n    }));\r\n\r\n    // Create a ground plane\r\n    const groundPlane = this.world.createEntity();\r\n    groundPlane.addComponent(new TransformComponent(\r\n      { x: 0, y: -1, z: 0 },\r\n      { x: -Math.PI / 2, y: 0, z: 0 },\r\n      { x: 10, y: 10, z: 1 }\r\n    ));\r\n    groundPlane.addComponent(new ThreeMeshComponent());\r\n    groundPlane.addComponent(new ThreeMaterialComponent({\r\n      materialType: 'standard',\r\n      color: '#795548',\r\n      metalness: 0.0,\r\n      roughness: 1.0\r\n    }));\r\n    groundPlane.addComponent(new ThreeGeometryComponent('plane', {\r\n      width: 1,\r\n      height: 1\r\n    }));\r\n\r\n    console.log('Added default test objects to scene');\r\n  }\r\n\r\n  /**\r\n   * Dispose of resources\r\n   * 释放资源\r\n   */\r\n  dispose(): void {\r\n    this.renderSystem.dispose();\r\n  }\r\n}\r\n\r\n/**\r\n * Entity conversion utilities\r\n * 实体转换工具\r\n */\r\nexport class EntityConverter {\r\n  /**\r\n   * Convert legacy mesh renderer component to Three.js components\r\n   * 将旧版网格渲染器组件转换为Three.js组件\r\n   */\r\n  static convertMeshRenderer(entity: Entity, meshRenderer: any): void {\r\n    // Remove old component\r\n    entity.removeComponent(MeshRendererComponent);\r\n\r\n    // Add Three.js components\r\n    entity.addComponent(new ThreeMeshComponent());\r\n    \r\n    entity.addComponent(new ThreeMaterialComponent({\r\n      materialType: 'standard',\r\n      color: meshRenderer.material === 'EnemyMaterial' ? '#F44336' : \r\n             meshRenderer.material === 'GroundMaterial' ? '#795548' : '#4CAF50',\r\n      metalness: 0.2,\r\n      roughness: 0.8\r\n    }));\r\n\r\n    entity.addComponent(new ThreeGeometryComponent(\r\n      meshRenderer.meshType || 'box',\r\n      meshRenderer.meshType === 'sphere' ? { radius: 0.5, widthSegments: 16, heightSegments: 12 } :\r\n      meshRenderer.meshType === 'plane' ? { width: 1, height: 1 } :\r\n      { width: 1, height: 1, depth: 1 }\r\n    ));\r\n  }\r\n\r\n  /**\r\n   * Batch convert all entities in world\r\n   * 批量转换世界中的所有实体\r\n   */\r\n  static convertAllEntities(world: World): void {\r\n    const entities = world.entities;\r\n    \r\n    for (const entity of entities) {\r\n      const meshRenderer = entity.getComponent(MeshRendererComponent);\r\n      if (meshRenderer) {\r\n        this.convertMeshRenderer(entity, meshRenderer);\r\n      }\r\n    }\r\n  }\r\n}","/**\r\n * Three.js Materials\r\n * Three.js材质系统\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Material factory for creating Three.js materials\r\n * 材质工厂 - 用于创建Three.js材质\r\n */\r\nexport class MaterialFactory {\r\n  private static textureLoader = new THREE.TextureLoader();\r\n  private static textureCache = new Map<string, THREE.Texture>();\r\n\r\n  /**\r\n   * Create material from configuration\r\n   * 根据配置创建材质\r\n   */\r\n  static createMaterial(config: MaterialConfig): THREE.Material {\r\n    const baseProps = {\r\n      color: new THREE.Color(config.color),\r\n      transparent: config.transparent || false,\r\n      opacity: config.opacity !== undefined ? config.opacity : 1.0,\r\n      wireframe: config.wireframe || false,\r\n      side: config.doubleSided ? THREE.DoubleSide : THREE.FrontSide\r\n    };\r\n\r\n    // Load texture if specified\r\n    if (config.texture) {\r\n      const texture = this.loadTexture(config.texture);\r\n      (baseProps as any).map = texture;\r\n    }\r\n\r\n    switch (config.type) {\r\n      case 'standard':\r\n        return new THREE.MeshStandardMaterial({\r\n          ...baseProps,\r\n          metalness: config.metalness || 0.0,\r\n          roughness: config.roughness || 1.0,\r\n          emissive: config.emissive ? new THREE.Color(config.emissive) : new THREE.Color(0x000000),\r\n          emissiveIntensity: config.emissiveIntensity || 0.0,\r\n          normalMap: config.normalMap ? this.loadTexture(config.normalMap) : undefined,\r\n          roughnessMap: config.roughnessMap ? this.loadTexture(config.roughnessMap) : undefined,\r\n          metalnessMap: config.metalnessMap ? this.loadTexture(config.metalnessMap) : undefined,\r\n          envMapIntensity: config.envMapIntensity || 1.0\r\n        });\r\n\r\n      case 'phong':\r\n        return new THREE.MeshPhongMaterial({\r\n          ...baseProps,\r\n          shininess: config.shininess || ((1.0 - (config.roughness || 1.0)) * 100),\r\n          specular: config.specular ? new THREE.Color(config.specular) : new THREE.Color(0x111111),\r\n          emissive: config.emissive ? new THREE.Color(config.emissive) : new THREE.Color(0x000000),\r\n          emissiveIntensity: config.emissiveIntensity || 0.0\r\n        });\r\n\r\n      case 'lambert':\r\n        return new THREE.MeshLambertMaterial({\r\n          ...baseProps,\r\n          emissive: config.emissive ? new THREE.Color(config.emissive) : new THREE.Color(0x000000),\r\n          emissiveIntensity: config.emissiveIntensity || 0.0\r\n        });\r\n\r\n      case 'basic':\r\n        return new THREE.MeshBasicMaterial(baseProps);\r\n\r\n      case 'physical':\r\n        return new THREE.MeshPhysicalMaterial({\r\n          ...baseProps,\r\n          metalness: config.metalness || 0.0,\r\n          roughness: config.roughness || 1.0,\r\n          emissive: config.emissive ? new THREE.Color(config.emissive) : new THREE.Color(0x000000),\r\n          emissiveIntensity: config.emissiveIntensity || 0.0,\r\n          clearcoat: config.clearcoat || 0.0,\r\n          clearcoatRoughness: config.clearcoatRoughness || 0.0,\r\n          transmission: config.transmission || 0.0,\r\n          thickness: config.thickness || 0.0,\r\n          ior: config.ior || 1.5\r\n        });\r\n\r\n      case 'toon':\r\n        return new THREE.MeshToonMaterial({\r\n          ...baseProps,\r\n          gradientMap: config.gradientMap ? this.loadTexture(config.gradientMap) : undefined\r\n        });\r\n\r\n      case 'matcap':\r\n        return new THREE.MeshMatcapMaterial({\r\n          ...baseProps,\r\n          matcap: config.matcap ? this.loadTexture(config.matcap) : undefined\r\n        });\r\n\r\n      case 'wireframe':\r\n        return new THREE.MeshBasicMaterial({\r\n          ...baseProps,\r\n          wireframe: true\r\n        });\r\n\r\n      default:\r\n        return new THREE.MeshStandardMaterial(baseProps);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load texture with caching\r\n   * 带缓存的纹理加载\r\n   */\r\n  private static loadTexture(url: string): THREE.Texture {\r\n    if (this.textureCache.has(url)) {\r\n      return this.textureCache.get(url)!;\r\n    }\r\n\r\n    const texture = this.textureLoader.load(url);\r\n    texture.wrapS = THREE.RepeatWrapping;\r\n    texture.wrapT = THREE.RepeatWrapping;\r\n    texture.colorSpace = THREE.SRGBColorSpace;\r\n    \r\n    this.textureCache.set(url, texture);\r\n    return texture;\r\n  }\r\n\r\n  /**\r\n   * Dispose of cached textures\r\n   * 释放缓存的纹理\r\n   */\r\n  static disposeCachedTextures(): void {\r\n    this.textureCache.forEach(texture => texture.dispose());\r\n    this.textureCache.clear();\r\n  }\r\n}\r\n\r\n/**\r\n * Material configuration interface\r\n * 材质配置接口\r\n */\r\nexport interface MaterialConfig {\r\n  type: 'standard' | 'phong' | 'lambert' | 'basic' | 'physical' | 'toon' | 'matcap' | 'wireframe';\r\n  color: string;\r\n  metalness?: number;\r\n  roughness?: number;\r\n  emissive?: string;\r\n  emissiveIntensity?: number;\r\n  transparent?: boolean;\r\n  opacity?: number;\r\n  wireframe?: boolean;\r\n  doubleSided?: boolean;\r\n  texture?: string;\r\n  normalMap?: string;\r\n  roughnessMap?: string;\r\n  metalnessMap?: string;\r\n  envMapIntensity?: number;\r\n  shininess?: number;\r\n  specular?: string;\r\n  clearcoat?: number;\r\n  clearcoatRoughness?: number;\r\n  transmission?: number;\r\n  thickness?: number;\r\n  ior?: number;\r\n  gradientMap?: string;\r\n  matcap?: string;\r\n}\r\n\r\n/**\r\n * Predefined material presets\r\n * 预定义材质预设\r\n */\r\nexport const MaterialPresets: Record<string, MaterialConfig> = {\r\n  // Basic materials\r\n  'Default': {\r\n    type: 'standard',\r\n    color: '#4CAF50',\r\n    metalness: 0.2,\r\n    roughness: 0.8\r\n  },\r\n  'White': {\r\n    type: 'standard',\r\n    color: '#FFFFFF',\r\n    metalness: 0.1,\r\n    roughness: 0.9\r\n  },\r\n  'Black': {\r\n    type: 'standard',\r\n    color: '#000000',\r\n    metalness: 0.1,\r\n    roughness: 0.9\r\n  },\r\n\r\n  // Metal materials\r\n  'Steel': {\r\n    type: 'standard',\r\n    color: '#B0B0B0',\r\n    metalness: 0.9,\r\n    roughness: 0.1\r\n  },\r\n  'Gold': {\r\n    type: 'standard',\r\n    color: '#FFD700',\r\n    metalness: 1.0,\r\n    roughness: 0.2\r\n  },\r\n  'Copper': {\r\n    type: 'standard',\r\n    color: '#B87333',\r\n    metalness: 1.0,\r\n    roughness: 0.3\r\n  },\r\n\r\n  // Plastic materials\r\n  'RedPlastic': {\r\n    type: 'standard',\r\n    color: '#F44336',\r\n    metalness: 0.0,\r\n    roughness: 0.9\r\n  },\r\n  'BluePlastic': {\r\n    type: 'standard',\r\n    color: '#2196F3',\r\n    metalness: 0.0,\r\n    roughness: 0.8\r\n  },\r\n  'GreenPlastic': {\r\n    type: 'standard',\r\n    color: '#4CAF50',\r\n    metalness: 0.0,\r\n    roughness: 0.9\r\n  },\r\n\r\n  // Glass materials\r\n  'Glass': {\r\n    type: 'physical',\r\n    color: '#FFFFFF',\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    transparent: true,\r\n    opacity: 0.1,\r\n    transmission: 0.9,\r\n    thickness: 0.5,\r\n    ior: 1.5\r\n  },\r\n  'TintedGlass': {\r\n    type: 'physical',\r\n    color: '#4080FF',\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    transparent: true,\r\n    opacity: 0.3,\r\n    transmission: 0.7,\r\n    thickness: 0.5,\r\n    ior: 1.5\r\n  },\r\n\r\n  // Emissive materials\r\n  'Neon': {\r\n    type: 'standard',\r\n    color: '#000000',\r\n    emissive: '#00FF00',\r\n    emissiveIntensity: 1.0,\r\n    metalness: 0.0,\r\n    roughness: 1.0\r\n  },\r\n  'Fire': {\r\n    type: 'standard',\r\n    color: '#000000',\r\n    emissive: '#FF4500',\r\n    emissiveIntensity: 0.8,\r\n    metalness: 0.0,\r\n    roughness: 1.0\r\n  },\r\n\r\n  // Special materials\r\n  'Wireframe': {\r\n    type: 'wireframe',\r\n    color: '#00FF00',\r\n    wireframe: true\r\n  },\r\n  'Invisible': {\r\n    type: 'basic',\r\n    color: '#FFFFFF',\r\n    transparent: true,\r\n    opacity: 0.0\r\n  },\r\n\r\n  // Toon materials\r\n  'ToonRed': {\r\n    type: 'toon',\r\n    color: '#FF6B6B'\r\n  },\r\n  'ToonBlue': {\r\n    type: 'toon',\r\n    color: '#4ECDC4'\r\n  },\r\n  'ToonYellow': {\r\n    type: 'toon',\r\n    color: '#FFE066'\r\n  }\r\n};\r\n\r\n/**\r\n * Material utilities\r\n * 材质工具\r\n */\r\nexport class MaterialUtils {\r\n  /**\r\n   * Clone a material configuration\r\n   * 克隆材质配置\r\n   */\r\n  static cloneMaterialConfig(config: MaterialConfig): MaterialConfig {\r\n    return { ...config };\r\n  }\r\n\r\n  /**\r\n   * Blend two materials\r\n   * 混合两个材质\r\n   */\r\n  static blendMaterials(material1: MaterialConfig, material2: MaterialConfig, factor: number): MaterialConfig {\r\n    const blended = { ...material1 };\r\n    \r\n    // Blend colors\r\n    const color1 = new THREE.Color(material1.color);\r\n    const color2 = new THREE.Color(material2.color);\r\n    color1.lerp(color2, factor);\r\n    blended.color = '#' + color1.getHexString();\r\n\r\n    // Blend numeric properties\r\n    if (material1.metalness !== undefined && material2.metalness !== undefined) {\r\n      blended.metalness = THREE.MathUtils.lerp(material1.metalness, material2.metalness, factor);\r\n    }\r\n    if (material1.roughness !== undefined && material2.roughness !== undefined) {\r\n      blended.roughness = THREE.MathUtils.lerp(material1.roughness, material2.roughness, factor);\r\n    }\r\n    if (material1.opacity !== undefined && material2.opacity !== undefined) {\r\n      blended.opacity = THREE.MathUtils.lerp(material1.opacity, material2.opacity, factor);\r\n    }\r\n\r\n    return blended;\r\n  }\r\n\r\n  /**\r\n   * Get material names by category\r\n   * 按类别获取材质名称\r\n   */\r\n  static getMaterialsByCategory(): Record<string, string[]> {\r\n    return {\r\n      'Basic': ['Default', 'White', 'Black'],\r\n      'Metal': ['Steel', 'Gold', 'Copper'],\r\n      'Plastic': ['RedPlastic', 'BluePlastic', 'GreenPlastic'],\r\n      'Glass': ['Glass', 'TintedGlass'],\r\n      'Emissive': ['Neon', 'Fire'],\r\n      'Special': ['Wireframe', 'Invisible'],\r\n      'Toon': ['ToonRed', 'ToonBlue', 'ToonYellow']\r\n    };\r\n  }\r\n}","/**\r\n * Three.js Geometries\r\n * Three.js几何体系统\r\n */\r\n\r\nimport * as THREE from 'three';\r\nimport { mergeGeometries, mergeVertices } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\r\n\r\n/**\r\n * Geometry factory for creating Three.js geometries\r\n * 几何体工厂 - 用于创建Three.js几何体\r\n */\r\nexport class GeometryFactory {\r\n  private static geometryCache = new Map<string, THREE.BufferGeometry>();\r\n\r\n  /**\r\n   * Create geometry from configuration\r\n   * 根据配置创建几何体\r\n   */\r\n  static createGeometry(config: GeometryConfig): THREE.BufferGeometry {\r\n    const cacheKey = this.getCacheKey(config);\r\n    \r\n    if (this.geometryCache.has(cacheKey)) {\r\n      return this.geometryCache.get(cacheKey)!.clone();\r\n    }\r\n\r\n    let geometry: THREE.BufferGeometry;\r\n\r\n    switch (config.type) {\r\n      case 'box':\r\n        geometry = new THREE.BoxGeometry(\r\n          config.width || 1,\r\n          config.height || 1,\r\n          config.depth || 1,\r\n          config.widthSegments || 1,\r\n          config.heightSegments || 1,\r\n          config.depthSegments || 1\r\n        );\r\n        break;\r\n\r\n      case 'sphere':\r\n        geometry = new THREE.SphereGeometry(\r\n          config.radius || 0.5,\r\n          config.widthSegments || 16,\r\n          config.heightSegments || 12,\r\n          config.phiStart || 0,\r\n          config.phiLength || Math.PI * 2,\r\n          config.thetaStart || 0,\r\n          config.thetaLength || Math.PI\r\n        );\r\n        break;\r\n\r\n      case 'plane':\r\n        geometry = new THREE.PlaneGeometry(\r\n          config.width || 1,\r\n          config.height || 1,\r\n          config.widthSegments || 1,\r\n          config.heightSegments || 1\r\n        );\r\n        break;\r\n\r\n      case 'cylinder':\r\n        geometry = new THREE.CylinderGeometry(\r\n          config.radiusTop || 0.5,\r\n          config.radiusBottom || 0.5,\r\n          config.height || 1,\r\n          config.radialSegments || 8,\r\n          config.heightSegments || 1,\r\n          config.openEnded || false,\r\n          config.thetaStart || 0,\r\n          config.thetaLength || Math.PI * 2\r\n        );\r\n        break;\r\n\r\n      case 'cone':\r\n        geometry = new THREE.ConeGeometry(\r\n          config.radius || 0.5,\r\n          config.height || 1,\r\n          config.radialSegments || 8,\r\n          config.heightSegments || 1,\r\n          config.openEnded || false,\r\n          config.thetaStart || 0,\r\n          config.thetaLength || Math.PI * 2\r\n        );\r\n        break;\r\n\r\n      case 'torus':\r\n        geometry = new THREE.TorusGeometry(\r\n          config.radius || 0.4,\r\n          config.tube || 0.2,\r\n          config.radialSegments || 8,\r\n          config.tubularSegments || 6,\r\n          config.arc || Math.PI * 2\r\n        );\r\n        break;\r\n\r\n      case 'torusKnot':\r\n        geometry = new THREE.TorusKnotGeometry(\r\n          config.radius || 0.4,\r\n          config.tube || 0.1,\r\n          config.tubularSegments || 64,\r\n          config.radialSegments || 8,\r\n          config.p || 2,\r\n          config.q || 3\r\n        );\r\n        break;\r\n\r\n      case 'dodecahedron':\r\n        geometry = new THREE.DodecahedronGeometry(\r\n          config.radius || 0.5,\r\n          config.detail || 0\r\n        );\r\n        break;\r\n\r\n      case 'icosahedron':\r\n        geometry = new THREE.IcosahedronGeometry(\r\n          config.radius || 0.5,\r\n          config.detail || 0\r\n        );\r\n        break;\r\n\r\n      case 'octahedron':\r\n        geometry = new THREE.OctahedronGeometry(\r\n          config.radius || 0.5,\r\n          config.detail || 0\r\n        );\r\n        break;\r\n\r\n      case 'tetrahedron':\r\n        geometry = new THREE.TetrahedronGeometry(\r\n          config.radius || 0.5,\r\n          config.detail || 0\r\n        );\r\n        break;\r\n\r\n      case 'capsule':\r\n        geometry = new THREE.CapsuleGeometry(\r\n          config.radius || 0.3,\r\n          config.length || 0.8,\r\n          config.capSegments || 4,\r\n          config.radialSegments || 8\r\n        );\r\n        break;\r\n\r\n      case 'ring':\r\n        geometry = new THREE.RingGeometry(\r\n          config.innerRadius || 0.2,\r\n          config.outerRadius || 0.5,\r\n          config.thetaSegments || 8,\r\n          config.phiSegments || 1,\r\n          config.thetaStart || 0,\r\n          config.thetaLength || Math.PI * 2\r\n        );\r\n        break;\r\n\r\n      case 'lathe':\r\n        const points = config.points || [\r\n          new THREE.Vector2(0, -0.5),\r\n          new THREE.Vector2(0.5, 0),\r\n          new THREE.Vector2(0, 0.5)\r\n        ];\r\n        geometry = new THREE.LatheGeometry(\r\n          points,\r\n          config.segments || 12,\r\n          config.phiStart || 0,\r\n          config.phiLength || Math.PI * 2\r\n        );\r\n        break;\r\n\r\n      case 'extrude':\r\n        if (config.shape) {\r\n          const extrudeSettings = {\r\n            depth: config.depth || 0.2,\r\n            bevelEnabled: config.bevelEnabled || false,\r\n            bevelSegments: config.bevelSegments || 2,\r\n            steps: config.steps || 1,\r\n            bevelSize: config.bevelSize || 0.1,\r\n            bevelThickness: config.bevelThickness || 0.1\r\n          };\r\n          geometry = new THREE.ExtrudeGeometry(config.shape, extrudeSettings);\r\n        } else {\r\n          // Fallback to box if no shape provided\r\n          geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        }\r\n        break;\r\n\r\n      default:\r\n        geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    }\r\n\r\n    // Cache the geometry\r\n    this.geometryCache.set(cacheKey, geometry.clone());\r\n    \r\n    return geometry;\r\n  }\r\n\r\n  /**\r\n   * Generate cache key for geometry configuration\r\n   * 为几何体配置生成缓存键\r\n   */\r\n  private static getCacheKey(config: GeometryConfig): string {\r\n    return JSON.stringify(config);\r\n  }\r\n\r\n  /**\r\n   * Clear geometry cache\r\n   * 清除几何体缓存\r\n   */\r\n  static clearCache(): void {\r\n    this.geometryCache.forEach(geometry => geometry.dispose());\r\n    this.geometryCache.clear();\r\n  }\r\n\r\n  /**\r\n   * Create custom shape for extrusion\r\n   * 为挤压创建自定义形状\r\n   */\r\n  static createShape(points: THREE.Vector2[]): THREE.Shape {\r\n    const shape = new THREE.Shape();\r\n    if (points.length > 0) {\r\n      shape.moveTo(points[0].x, points[0].y);\r\n      for (let i = 1; i < points.length; i++) {\r\n        shape.lineTo(points[i].x, points[i].y);\r\n      }\r\n    }\r\n    return shape;\r\n  }\r\n}\r\n\r\n/**\r\n * Geometry configuration interface\r\n * 几何体配置接口\r\n */\r\nexport interface GeometryConfig {\r\n  type: 'box' | 'sphere' | 'plane' | 'cylinder' | 'cone' | 'torus' | 'torusKnot' | \r\n        'dodecahedron' | 'icosahedron' | 'octahedron' | 'tetrahedron' | 'capsule' | \r\n        'ring' | 'lathe' | 'extrude';\r\n  \r\n  // Common properties\r\n  width?: number;\r\n  height?: number;\r\n  depth?: number;\r\n  radius?: number;\r\n  \r\n  // Segment properties\r\n  widthSegments?: number;\r\n  heightSegments?: number;\r\n  depthSegments?: number;\r\n  radialSegments?: number;\r\n  tubularSegments?: number;\r\n  \r\n  // Sphere specific\r\n  phiStart?: number;\r\n  phiLength?: number;\r\n  thetaStart?: number;\r\n  thetaLength?: number;\r\n  \r\n  // Cylinder/Cone specific\r\n  radiusTop?: number;\r\n  radiusBottom?: number;\r\n  openEnded?: boolean;\r\n  \r\n  // Torus specific\r\n  tube?: number;\r\n  arc?: number;\r\n  \r\n  // Torus knot specific\r\n  p?: number;\r\n  q?: number;\r\n  \r\n  // Polyhedron specific\r\n  detail?: number;\r\n  \r\n  // Capsule specific\r\n  capSegments?: number;\r\n  length?: number;\r\n  \r\n  // Ring specific\r\n  innerRadius?: number;\r\n  outerRadius?: number;\r\n  thetaSegments?: number;\r\n  phiSegments?: number;\r\n  \r\n  // Lathe specific\r\n  points?: THREE.Vector2[];\r\n  segments?: number;\r\n  \r\n  // Extrude specific\r\n  shape?: THREE.Shape;\r\n  steps?: number;\r\n  bevelEnabled?: boolean;\r\n  bevelSegments?: number;\r\n  bevelSize?: number;\r\n  bevelThickness?: number;\r\n}\r\n\r\n/**\r\n * Predefined geometry presets\r\n * 预定义几何体预设\r\n */\r\nexport const GeometryPresets: Record<string, GeometryConfig> = {\r\n  // Basic shapes\r\n  'Cube': {\r\n    type: 'box',\r\n    width: 1,\r\n    height: 1,\r\n    depth: 1\r\n  },\r\n  'Sphere': {\r\n    type: 'sphere',\r\n    radius: 0.5,\r\n    widthSegments: 16,\r\n    heightSegments: 12\r\n  },\r\n  'Plane': {\r\n    type: 'plane',\r\n    width: 1,\r\n    height: 1\r\n  },\r\n  'Cylinder': {\r\n    type: 'cylinder',\r\n    radiusTop: 0.5,\r\n    radiusBottom: 0.5,\r\n    height: 1,\r\n    radialSegments: 8\r\n  },\r\n  'Cone': {\r\n    type: 'cone',\r\n    radius: 0.5,\r\n    height: 1,\r\n    radialSegments: 8\r\n  },\r\n\r\n  // Advanced shapes\r\n  'Torus': {\r\n    type: 'torus',\r\n    radius: 0.4,\r\n    tube: 0.2,\r\n    radialSegments: 8,\r\n    tubularSegments: 6\r\n  },\r\n  'TorusKnot': {\r\n    type: 'torusKnot',\r\n    radius: 0.4,\r\n    tube: 0.1,\r\n    tubularSegments: 64,\r\n    radialSegments: 8\r\n  },\r\n  'Capsule': {\r\n    type: 'capsule',\r\n    radius: 0.3,\r\n    length: 0.8,\r\n    capSegments: 4,\r\n    radialSegments: 8\r\n  },\r\n\r\n  // Polyhedra\r\n  'Dodecahedron': {\r\n    type: 'dodecahedron',\r\n    radius: 0.5\r\n  },\r\n  'Icosahedron': {\r\n    type: 'icosahedron',\r\n    radius: 0.5\r\n  },\r\n  'Octahedron': {\r\n    type: 'octahedron',\r\n    radius: 0.5\r\n  },\r\n  'Tetrahedron': {\r\n    type: 'tetrahedron',\r\n    radius: 0.5\r\n  },\r\n\r\n  // Special shapes\r\n  'Ring': {\r\n    type: 'ring',\r\n    innerRadius: 0.2,\r\n    outerRadius: 0.5,\r\n    thetaSegments: 8\r\n  },\r\n  'Wheel': {\r\n    type: 'cylinder',\r\n    radiusTop: 0.5,\r\n    radiusBottom: 0.5,\r\n    height: 0.2,\r\n    radialSegments: 16\r\n  },\r\n  'Disk': {\r\n    type: 'cylinder',\r\n    radiusTop: 0.5,\r\n    radiusBottom: 0.5,\r\n    height: 0.05,\r\n    radialSegments: 16\r\n  }\r\n};\r\n\r\n/**\r\n * Geometry utilities\r\n * 几何体工具\r\n */\r\nexport class GeometryUtils {\r\n  /**\r\n   * Calculate bounding box of geometry\r\n   * 计算几何体边界框\r\n   */\r\n  static calculateBoundingBox(geometry: THREE.BufferGeometry): THREE.Box3 {\r\n    geometry.computeBoundingBox();\r\n    return geometry.boundingBox || new THREE.Box3();\r\n  }\r\n\r\n  /**\r\n   * Calculate bounding sphere of geometry\r\n   * 计算几何体边界球\r\n   */\r\n  static calculateBoundingSphere(geometry: THREE.BufferGeometry): THREE.Sphere {\r\n    geometry.computeBoundingSphere();\r\n    return geometry.boundingSphere || new THREE.Sphere();\r\n  }\r\n\r\n  /**\r\n   * Merge multiple geometries\r\n   * 合并多个几何体\r\n   */\r\n  static mergeGeometries(geometries: THREE.BufferGeometry[]): THREE.BufferGeometry {\r\n    return mergeGeometries(geometries);\r\n  }\r\n\r\n  /**\r\n   * Create wireframe geometry\r\n   * 创建线框几何体\r\n   */\r\n  static createWireframe(geometry: THREE.BufferGeometry): THREE.WireframeGeometry {\r\n    return new THREE.WireframeGeometry(geometry);\r\n  }\r\n\r\n  /**\r\n   * Create edges geometry\r\n   * 创建边缘几何体\r\n   */\r\n  static createEdges(geometry: THREE.BufferGeometry, thresholdAngle: number = 1): THREE.EdgesGeometry {\r\n    return new THREE.EdgesGeometry(geometry, thresholdAngle);\r\n  }\r\n\r\n  /**\r\n   * Get geometry categories\r\n   * 获取几何体分类\r\n   */\r\n  static getGeometryCategories(): Record<string, string[]> {\r\n    return {\r\n      'Basic': ['Cube', 'Sphere', 'Plane', 'Cylinder', 'Cone'],\r\n      'Advanced': ['Torus', 'TorusKnot', 'Capsule'],\r\n      'Polyhedra': ['Dodecahedron', 'Icosahedron', 'Octahedron', 'Tetrahedron'],\r\n      'Special': ['Ring', 'Wheel', 'Disk']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Optimize geometry for rendering\r\n   * 优化几何体以提高渲染性能\r\n   */\r\n  static optimizeGeometry(geometry: THREE.BufferGeometry): THREE.BufferGeometry {\r\n    // Remove duplicate vertices\r\n    geometry = mergeVertices(geometry);\r\n    \r\n    // Compute normals if they don't exist\r\n    if (!geometry.attributes.normal) {\r\n      geometry.computeVertexNormals();\r\n    }\r\n    \r\n    // Compute tangents for normal mapping\r\n    if (geometry.attributes.uv && !geometry.attributes.tangent) {\r\n      geometry.computeTangents();\r\n    }\r\n    \r\n    return geometry;\r\n  }\r\n}","/**\r\n * Three.js Lights\r\n * Three.js光照系统\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Light factory for creating Three.js lights\r\n * 光照工厂 - 用于创建Three.js光照\r\n */\r\nexport class LightFactory {\r\n  /**\r\n   * Create light from configuration\r\n   * 根据配置创建光照\r\n   */\r\n  static createLight(config: LightConfig): THREE.Light {\r\n    const color = new THREE.Color(config.color);\r\n    \r\n    switch (config.type) {\r\n      case 'ambient':\r\n        return new THREE.AmbientLight(color, config.intensity);\r\n\r\n      case 'directional':\r\n        const directionalLight = new THREE.DirectionalLight(color, config.intensity);\r\n        directionalLight.castShadow = config.castShadow || false;\r\n        \r\n        if (config.castShadow) {\r\n          this.setupDirectionalLightShadows(directionalLight, config);\r\n        }\r\n        \r\n        if (config.target) {\r\n          directionalLight.target.position.set(config.target.x, config.target.y, config.target.z);\r\n        }\r\n        \r\n        return directionalLight;\r\n\r\n      case 'point':\r\n        const pointLight = new THREE.PointLight(color, config.intensity, config.distance, config.decay);\r\n        pointLight.castShadow = config.castShadow || false;\r\n        \r\n        if (config.castShadow) {\r\n          this.setupPointLightShadows(pointLight, config);\r\n        }\r\n        \r\n        return pointLight;\r\n\r\n      case 'spot':\r\n        const spotLight = new THREE.SpotLight(\r\n          color, \r\n          config.intensity, \r\n          config.distance, \r\n          config.angle, \r\n          config.penumbra, \r\n          config.decay\r\n        );\r\n        spotLight.castShadow = config.castShadow || false;\r\n        \r\n        if (config.castShadow) {\r\n          this.setupSpotLightShadows(spotLight, config);\r\n        }\r\n        \r\n        if (config.target) {\r\n          spotLight.target.position.set(config.target.x, config.target.y, config.target.z);\r\n        }\r\n        \r\n        return spotLight;\r\n\r\n      case 'hemisphere':\r\n        return new THREE.HemisphereLight(color, config.groundColor, config.intensity);\r\n\r\n      case 'rectArea':\r\n        const rectAreaLight = new THREE.RectAreaLight(color, config.intensity, config.width, config.height);\r\n        return rectAreaLight;\r\n\r\n      default:\r\n        return new THREE.DirectionalLight(color, config.intensity);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup shadows for directional light\r\n   * 为方向光设置阴影\r\n   */\r\n  private static setupDirectionalLightShadows(light: THREE.DirectionalLight, config: LightConfig): void {\r\n    const shadowConfig = config.shadow || {};\r\n    \r\n    light.shadow.mapSize.width = shadowConfig.mapSize || 2048;\r\n    light.shadow.mapSize.height = shadowConfig.mapSize || 2048;\r\n    light.shadow.camera.near = shadowConfig.near || 0.5;\r\n    light.shadow.camera.far = shadowConfig.far || 500;\r\n    \r\n    // Set shadow camera bounds\r\n    const size = shadowConfig.cameraSize || 10;\r\n    light.shadow.camera.left = -size;\r\n    light.shadow.camera.right = size;\r\n    light.shadow.camera.top = size;\r\n    light.shadow.camera.bottom = -size;\r\n    \r\n    light.shadow.bias = shadowConfig.bias || 0;\r\n    light.shadow.normalBias = shadowConfig.normalBias || 0;\r\n    light.shadow.radius = shadowConfig.radius || 1;\r\n  }\r\n\r\n  /**\r\n   * Setup shadows for point light\r\n   * 为点光源设置阴影\r\n   */\r\n  private static setupPointLightShadows(light: THREE.PointLight, config: LightConfig): void {\r\n    const shadowConfig = config.shadow || {};\r\n    \r\n    light.shadow.mapSize.width = shadowConfig.mapSize || 1024;\r\n    light.shadow.mapSize.height = shadowConfig.mapSize || 1024;\r\n    light.shadow.camera.near = shadowConfig.near || 0.1;\r\n    light.shadow.camera.far = shadowConfig.far || 100;\r\n    light.shadow.bias = shadowConfig.bias || 0;\r\n    light.shadow.normalBias = shadowConfig.normalBias || 0;\r\n    light.shadow.radius = shadowConfig.radius || 1;\r\n  }\r\n\r\n  /**\r\n   * Setup shadows for spot light\r\n   * 为聚光灯设置阴影\r\n   */\r\n  private static setupSpotLightShadows(light: THREE.SpotLight, config: LightConfig): void {\r\n    const shadowConfig = config.shadow || {};\r\n    \r\n    light.shadow.mapSize.width = shadowConfig.mapSize || 1024;\r\n    light.shadow.mapSize.height = shadowConfig.mapSize || 1024;\r\n    light.shadow.camera.near = shadowConfig.near || 0.1;\r\n    light.shadow.camera.far = shadowConfig.far || 100;\r\n    light.shadow.bias = shadowConfig.bias || 0;\r\n    light.shadow.normalBias = shadowConfig.normalBias || 0;\r\n    light.shadow.radius = shadowConfig.radius || 1;\r\n  }\r\n\r\n  /**\r\n   * Create light helper for visualization\r\n   * 创建光照辅助器用于可视化\r\n   */\r\n  static createLightHelper(light: THREE.Light): THREE.Object3D | null {\r\n    if (light instanceof THREE.DirectionalLight) {\r\n      return new THREE.DirectionalLightHelper(light, 1);\r\n    } else if (light instanceof THREE.PointLight) {\r\n      return new THREE.PointLightHelper(light, 0.1);\r\n    } else if (light instanceof THREE.SpotLight) {\r\n      return new THREE.SpotLightHelper(light);\r\n    } else if (light instanceof THREE.HemisphereLight) {\r\n      return new THREE.HemisphereLightHelper(light, 1);\r\n    } else if (light instanceof THREE.RectAreaLight) {\r\n      // Note: RectAreaLightHelper requires RectAreaLightUniformsLib\r\n      // return new THREE.RectAreaLightHelper(light);\r\n      return null;\r\n    }\r\n    \r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Light configuration interface\r\n * 光照配置接口\r\n */\r\nexport interface LightConfig {\r\n  type: 'ambient' | 'directional' | 'point' | 'spot' | 'hemisphere' | 'rectArea';\r\n  color: string;\r\n  intensity: number;\r\n  \r\n  // Position and target\r\n  position?: { x: number; y: number; z: number };\r\n  target?: { x: number; y: number; z: number };\r\n  \r\n  // Point and spot light properties\r\n  distance?: number;\r\n  decay?: number;\r\n  \r\n  // Spot light properties\r\n  angle?: number;\r\n  penumbra?: number;\r\n  \r\n  // Hemisphere light properties\r\n  groundColor?: string;\r\n  \r\n  // Rect area light properties\r\n  width?: number;\r\n  height?: number;\r\n  \r\n  // Shadow properties\r\n  castShadow?: boolean;\r\n  shadow?: ShadowConfig;\r\n}\r\n\r\n/**\r\n * Shadow configuration interface\r\n * 阴影配置接口\r\n */\r\nexport interface ShadowConfig {\r\n  mapSize?: number;\r\n  near?: number;\r\n  far?: number;\r\n  bias?: number;\r\n  normalBias?: number;\r\n  radius?: number;\r\n  cameraSize?: number; // For directional light shadow camera\r\n}\r\n\r\n/**\r\n * Predefined light presets\r\n * 预定义光照预设\r\n */\r\nexport const LightPresets: Record<string, LightConfig> = {\r\n  // Basic lighting setups\r\n  'DefaultAmbient': {\r\n    type: 'ambient',\r\n    color: '#404040',\r\n    intensity: 0.4\r\n  },\r\n  'DefaultDirectional': {\r\n    type: 'directional',\r\n    color: '#ffffff',\r\n    intensity: 1.0,\r\n    position: { x: 10, y: 10, z: 5 },\r\n    target: { x: 0, y: 0, z: 0 },\r\n    castShadow: true,\r\n    shadow: {\r\n      mapSize: 2048,\r\n      cameraSize: 10\r\n    }\r\n  },\r\n\r\n  // Studio lighting\r\n  'StudioKeyLight': {\r\n    type: 'directional',\r\n    color: '#ffffff',\r\n    intensity: 1.2,\r\n    position: { x: 5, y: 10, z: 5 },\r\n    castShadow: true,\r\n    shadow: {\r\n      mapSize: 2048,\r\n      cameraSize: 15\r\n    }\r\n  },\r\n  'StudioFillLight': {\r\n    type: 'directional',\r\n    color: '#87ceeb',\r\n    intensity: 0.4,\r\n    position: { x: -5, y: 5, z: 5 }\r\n  },\r\n  'StudioBackLight': {\r\n    type: 'directional',\r\n    color: '#ffd700',\r\n    intensity: 0.6,\r\n    position: { x: 0, y: 5, z: -5 }\r\n  },\r\n\r\n  // Natural lighting\r\n  'Sunlight': {\r\n    type: 'directional',\r\n    color: '#fff8dc',\r\n    intensity: 1.5,\r\n    position: { x: 20, y: 20, z: 10 },\r\n    castShadow: true,\r\n    shadow: {\r\n      mapSize: 4096,\r\n      cameraSize: 20\r\n    }\r\n  },\r\n  'Moonlight': {\r\n    type: 'directional',\r\n    color: '#b0c4de',\r\n    intensity: 0.5,\r\n    position: { x: -10, y: 15, z: -10 },\r\n    castShadow: true\r\n  },\r\n  'SkyAmbient': {\r\n    type: 'hemisphere',\r\n    color: '#87ceeb',\r\n    groundColor: '#8b7355',\r\n    intensity: 0.6\r\n  },\r\n\r\n  // Colored lighting\r\n  'WarmSpot': {\r\n    type: 'spot',\r\n    color: '#ffa500',\r\n    intensity: 1.0,\r\n    position: { x: 0, y: 5, z: 0 },\r\n    target: { x: 0, y: 0, z: 0 },\r\n    angle: Math.PI / 4,\r\n    penumbra: 0.3,\r\n    distance: 20,\r\n    castShadow: true\r\n  },\r\n  'CoolPoint': {\r\n    type: 'point',\r\n    color: '#4169e1',\r\n    intensity: 1.0,\r\n    position: { x: 2, y: 3, z: 2 },\r\n    distance: 15,\r\n    decay: 2,\r\n    castShadow: true\r\n  },\r\n\r\n  // Atmospheric lighting\r\n  'FireGlow': {\r\n    type: 'point',\r\n    color: '#ff4500',\r\n    intensity: 2.0,\r\n    position: { x: 0, y: 1, z: 0 },\r\n    distance: 10,\r\n    decay: 2\r\n  },\r\n  'NeonBlue': {\r\n    type: 'point',\r\n    color: '#00ffff',\r\n    intensity: 1.5,\r\n    position: { x: 0, y: 2, z: 0 },\r\n    distance: 8,\r\n    decay: 1\r\n  },\r\n  'NeonPink': {\r\n    type: 'point',\r\n    color: '#ff1493',\r\n    intensity: 1.5,\r\n    position: { x: 0, y: 2, z: 0 },\r\n    distance: 8,\r\n    decay: 1\r\n  }\r\n};\r\n\r\n/**\r\n * Lighting setup presets\r\n * 光照设置预设\r\n */\r\nexport const LightingSetups: Record<string, LightConfig[]> = {\r\n  'ThreePoint': [\r\n    LightPresets.StudioKeyLight,\r\n    LightPresets.StudioFillLight,\r\n    LightPresets.StudioBackLight,\r\n    LightPresets.DefaultAmbient\r\n  ],\r\n  \r\n  'Natural': [\r\n    LightPresets.Sunlight,\r\n    LightPresets.SkyAmbient\r\n  ],\r\n  \r\n  'Night': [\r\n    LightPresets.Moonlight,\r\n    {\r\n      type: 'ambient',\r\n      color: '#191970',\r\n      intensity: 0.1\r\n    }\r\n  ],\r\n  \r\n  'Indoor': [\r\n    {\r\n      type: 'ambient',\r\n      color: '#f5f5dc',\r\n      intensity: 0.3\r\n    },\r\n    {\r\n      type: 'point',\r\n      color: '#ffffff',\r\n      intensity: 1.0,\r\n      position: { x: 0, y: 4, z: 0 },\r\n      distance: 20,\r\n      decay: 2,\r\n      castShadow: true\r\n    }\r\n  ],\r\n  \r\n  'Dramatic': [\r\n    {\r\n      type: 'directional',\r\n      color: '#ffffff',\r\n      intensity: 2.0,\r\n      position: { x: 10, y: 20, z: -5 },\r\n      castShadow: true,\r\n      shadow: {\r\n        mapSize: 4096,\r\n        cameraSize: 20\r\n      }\r\n    },\r\n    {\r\n      type: 'ambient',\r\n      color: '#000000',\r\n      intensity: 0.1\r\n    }\r\n  ]\r\n};\r\n\r\n/**\r\n * Light utilities\r\n * 光照工具\r\n */\r\nexport class LightUtils {\r\n  /**\r\n   * Calculate light intensity for distance\r\n   * 根据距离计算光照强度\r\n   */\r\n  static calculateIntensityForDistance(baseIntensity: number, distance: number, decay: number = 2): number {\r\n    return baseIntensity / Math.pow(distance, decay);\r\n  }\r\n\r\n  /**\r\n   * Convert color temperature to RGB\r\n   * 将色温转换为RGB\r\n   */\r\n  static colorTemperatureToRGB(temperature: number): string {\r\n    // Simplified color temperature to RGB conversion\r\n    let red, green, blue;\r\n    \r\n    temperature = temperature / 100;\r\n    \r\n    if (temperature <= 66) {\r\n      red = 255;\r\n      green = temperature;\r\n      green = 99.4708025861 * Math.log(green) - 161.1195681661;\r\n      \r\n      if (temperature >= 19) {\r\n        blue = temperature - 10;\r\n        blue = 138.5177312231 * Math.log(blue) - 305.0447927307;\r\n      } else {\r\n        blue = 0;\r\n      }\r\n    } else {\r\n      red = temperature - 60;\r\n      red = 329.698727446 * Math.pow(red, -0.1332047592);\r\n      \r\n      green = temperature - 60;\r\n      green = 288.1221695283 * Math.pow(green, -0.0755148492);\r\n      \r\n      blue = 255;\r\n    }\r\n    \r\n    red = Math.max(0, Math.min(255, red));\r\n    green = Math.max(0, Math.min(255, green));\r\n    blue = Math.max(0, Math.min(255, blue));\r\n    \r\n    return `#${Math.round(red).toString(16).padStart(2, '0')}${Math.round(green).toString(16).padStart(2, '0')}${Math.round(blue).toString(16).padStart(2, '0')}`;\r\n  }\r\n\r\n  /**\r\n   * Create lighting setup from preset\r\n   * 从预设创建光照设置\r\n   */\r\n  static createLightingSetup(setupName: string): THREE.Light[] {\r\n    const configs = LightingSetups[setupName];\r\n    if (!configs) {\r\n      console.warn(`Lighting setup '${setupName}' not found`);\r\n      return [];\r\n    }\r\n    \r\n    return configs.map(config => LightFactory.createLight(config));\r\n  }\r\n\r\n  /**\r\n   * Get available lighting categories\r\n   * 获取可用的光照分类\r\n   */\r\n  static getLightingCategories(): Record<string, string[]> {\r\n    return {\r\n      'Basic': ['DefaultAmbient', 'DefaultDirectional'],\r\n      'Studio': ['StudioKeyLight', 'StudioFillLight', 'StudioBackLight'],\r\n      'Natural': ['Sunlight', 'Moonlight', 'SkyAmbient'],\r\n      'Colored': ['WarmSpot', 'CoolPoint'],\r\n      'Atmospheric': ['FireGlow', 'NeonBlue', 'NeonPink']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Animate light intensity\r\n   * 动画光照强度\r\n   */\r\n  static animateLightIntensity(\r\n    light: THREE.Light, \r\n    targetIntensity: number, \r\n    duration: number = 1000\r\n  ): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      const startIntensity = light.intensity;\r\n      const startTime = Date.now();\r\n      \r\n      const animate = () => {\r\n        const elapsed = Date.now() - startTime;\r\n        const progress = Math.min(elapsed / duration, 1);\r\n        \r\n        light.intensity = startIntensity + (targetIntensity - startIntensity) * progress;\r\n        \r\n        if (progress < 1) {\r\n          requestAnimationFrame(animate);\r\n        } else {\r\n          resolve();\r\n        }\r\n      };\r\n      \r\n      animate();\r\n    });\r\n  }\r\n}","/**\r\n * Three.js Cameras\r\n * Three.js相机系统\r\n */\r\n\r\nimport * as THREE from 'three';\r\n\r\n/**\r\n * Camera factory for creating Three.js cameras\r\n * 相机工厂 - 用于创建Three.js相机\r\n */\r\nexport class CameraFactory {\r\n  /**\r\n   * Create camera from configuration\r\n   * 根据配置创建相机\r\n   */\r\n  static createCamera(config: CameraConfig): THREE.Camera {\r\n    switch (config.type) {\r\n      case 'perspective':\r\n        return new THREE.PerspectiveCamera(\r\n          config.fov || 75,\r\n          config.aspect || 1,\r\n          config.near || 0.1,\r\n          config.far || 1000\r\n        );\r\n\r\n      case 'orthographic':\r\n        const size = config.size || 10;\r\n        const aspect = config.aspect || 1;\r\n        return new THREE.OrthographicCamera(\r\n          -size * aspect,\r\n          size * aspect,\r\n          size,\r\n          -size,\r\n          config.near || 0.1,\r\n          config.far || 1000\r\n        );\r\n\r\n      case 'stereo':\r\n        const stereoCamera = new THREE.StereoCamera();\r\n        stereoCamera.aspect = config.aspect || 1;\r\n        stereoCamera.eyeSep = config.eyeSeparation || 0.064;\r\n        return stereoCamera as any; // Cast needed due to StereoCamera not extending Camera\r\n\r\n      default:\r\n        return new THREE.PerspectiveCamera(75, 1, 0.1, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create camera controls\r\n   * 创建相机控制器\r\n   */\r\n  static createCameraControls(camera: THREE.Camera, domElement: HTMLElement, type: CameraControlType = 'orbit'): any {\r\n    // Note: This would require importing control libraries\r\n    // For now, we'll return a mock object\r\n    switch (type) {\r\n      case 'orbit':\r\n        // return new OrbitControls(camera, domElement);\r\n        return { type: 'orbit', camera, domElement };\r\n      case 'fly':\r\n        // return new FlyControls(camera, domElement);\r\n        return { type: 'fly', camera, domElement };\r\n      case 'first-person':\r\n        // return new FirstPersonControls(camera, domElement);\r\n        return { type: 'first-person', camera, domElement };\r\n      case 'trackball':\r\n        // return new TrackballControls(camera, domElement);\r\n        return { type: 'trackball', camera, domElement };\r\n      default:\r\n        return { type: 'orbit', camera, domElement };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create camera helper for visualization\r\n   * 创建相机辅助器用于可视化\r\n   */\r\n  static createCameraHelper(camera: THREE.Camera): THREE.CameraHelper {\r\n    return new THREE.CameraHelper(camera);\r\n  }\r\n}\r\n\r\n/**\r\n * Camera configuration interface\r\n * 相机配置接口\r\n */\r\nexport interface CameraConfig {\r\n  type: 'perspective' | 'orthographic' | 'stereo';\r\n  \r\n  // Common properties\r\n  aspect?: number;\r\n  near?: number;\r\n  far?: number;\r\n  \r\n  // Perspective camera\r\n  fov?: number;\r\n  \r\n  // Orthographic camera\r\n  size?: number;\r\n  \r\n  // Stereo camera\r\n  eyeSeparation?: number;\r\n  \r\n  // Position and rotation\r\n  position?: { x: number; y: number; z: number };\r\n  rotation?: { x: number; y: number; z: number };\r\n  target?: { x: number; y: number; z: number };\r\n}\r\n\r\n/**\r\n * Camera control types\r\n * 相机控制类型\r\n */\r\nexport type CameraControlType = 'orbit' | 'fly' | 'first-person' | 'trackball';\r\n\r\n/**\r\n * Predefined camera presets\r\n * 预定义相机预设\r\n */\r\nexport const CameraPresets: Record<string, CameraConfig> = {\r\n  // Basic cameras\r\n  'DefaultPerspective': {\r\n    type: 'perspective',\r\n    fov: 75,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000,\r\n    position: { x: 5, y: 5, z: 5 },\r\n    target: { x: 0, y: 0, z: 0 }\r\n  },\r\n  \r\n  'DefaultOrthographic': {\r\n    type: 'orthographic',\r\n    size: 10,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000,\r\n    position: { x: 5, y: 5, z: 5 },\r\n    target: { x: 0, y: 0, z: 0 }\r\n  },\r\n\r\n  // Perspective variations\r\n  'WideFOV': {\r\n    type: 'perspective',\r\n    fov: 90,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000\r\n  },\r\n  \r\n  'NarrowFOV': {\r\n    type: 'perspective',\r\n    fov: 45,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000\r\n  },\r\n\r\n  'TelephotoLens': {\r\n    type: 'perspective',\r\n    fov: 30,\r\n    aspect: 16/9,\r\n    near: 1,\r\n    far: 2000\r\n  },\r\n\r\n  'WideAngleLens': {\r\n    type: 'perspective',\r\n    fov: 100,\r\n    aspect: 16/9,\r\n    near: 0.01,\r\n    far: 500\r\n  },\r\n\r\n  // Orthographic variations\r\n  'TopDown': {\r\n    type: 'orthographic',\r\n    size: 10,\r\n    aspect: 1,\r\n    near: 0.1,\r\n    far: 100,\r\n    position: { x: 0, y: 20, z: 0 },\r\n    rotation: { x: -90, y: 0, z: 0 }\r\n  },\r\n\r\n  'SideView': {\r\n    type: 'orthographic',\r\n    size: 10,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 100,\r\n    position: { x: 20, y: 0, z: 0 },\r\n    rotation: { x: 0, y: 90, z: 0 }\r\n  },\r\n\r\n  'FrontView': {\r\n    type: 'orthographic',\r\n    size: 10,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 100,\r\n    position: { x: 0, y: 0, z: 20 },\r\n    rotation: { x: 0, y: 0, z: 0 }\r\n  },\r\n\r\n  // Cinematic cameras\r\n  'CinematicWide': {\r\n    type: 'perspective',\r\n    fov: 85,\r\n    aspect: 21/9, // Ultra-wide cinematic aspect\r\n    near: 0.1,\r\n    far: 1000\r\n  },\r\n\r\n  'CinematicStandard': {\r\n    type: 'perspective',\r\n    fov: 50,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000\r\n  },\r\n\r\n  'Portrait': {\r\n    type: 'perspective',\r\n    fov: 75,\r\n    aspect: 9/16,\r\n    near: 0.1,\r\n    far: 1000\r\n  },\r\n\r\n  // Game-style cameras\r\n  'ThirdPerson': {\r\n    type: 'perspective',\r\n    fov: 75,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000,\r\n    position: { x: 0, y: 5, z: 10 },\r\n    target: { x: 0, y: 0, z: 0 }\r\n  },\r\n\r\n  'FirstPerson': {\r\n    type: 'perspective',\r\n    fov: 90,\r\n    aspect: 16/9,\r\n    near: 0.01,\r\n    far: 1000,\r\n    position: { x: 0, y: 1.8, z: 0 }\r\n  },\r\n\r\n  'IsometricGame': {\r\n    type: 'orthographic',\r\n    size: 15,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 1000,\r\n    position: { x: 10, y: 10, z: 10 },\r\n    target: { x: 0, y: 0, z: 0 }\r\n  },\r\n\r\n  // Architectural cameras\r\n  'ArchViz': {\r\n    type: 'perspective',\r\n    fov: 60,\r\n    aspect: 16/9,\r\n    near: 0.1,\r\n    far: 2000,\r\n    position: { x: 15, y: 8, z: 15 }\r\n  },\r\n\r\n  'Interior': {\r\n    type: 'perspective',\r\n    fov: 75,\r\n    aspect: 16/9,\r\n    near: 0.01,\r\n    far: 100,\r\n    position: { x: 0, y: 1.6, z: 5 }\r\n  }\r\n};\r\n\r\n/**\r\n * Camera animation presets\r\n * 相机动画预设\r\n */\r\nexport interface CameraAnimation {\r\n  name: string;\r\n  keyframes: CameraKeyframe[];\r\n  duration: number;\r\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\r\n}\r\n\r\nexport interface CameraKeyframe {\r\n  time: number; // 0-1\r\n  position: { x: number; y: number; z: number };\r\n  target?: { x: number; y: number; z: number };\r\n  fov?: number;\r\n}\r\n\r\nexport const CameraAnimations: Record<string, CameraAnimation> = {\r\n  'OrbitAround': {\r\n    name: 'Orbit Around',\r\n    duration: 10000,\r\n    easing: 'linear',\r\n    keyframes: [\r\n      { time: 0, position: { x: 10, y: 5, z: 0 }, target: { x: 0, y: 0, z: 0 } },\r\n      { time: 0.25, position: { x: 0, y: 5, z: 10 }, target: { x: 0, y: 0, z: 0 } },\r\n      { time: 0.5, position: { x: -10, y: 5, z: 0 }, target: { x: 0, y: 0, z: 0 } },\r\n      { time: 0.75, position: { x: 0, y: 5, z: -10 }, target: { x: 0, y: 0, z: 0 } },\r\n      { time: 1, position: { x: 10, y: 5, z: 0 }, target: { x: 0, y: 0, z: 0 } }\r\n    ]\r\n  },\r\n\r\n  'ZoomIn': {\r\n    name: 'Zoom In',\r\n    duration: 3000,\r\n    easing: 'ease-in-out',\r\n    keyframes: [\r\n      { time: 0, position: { x: 20, y: 20, z: 20 }, target: { x: 0, y: 0, z: 0 }, fov: 75 },\r\n      { time: 1, position: { x: 5, y: 5, z: 5 }, target: { x: 0, y: 0, z: 0 }, fov: 50 }\r\n    ]\r\n  },\r\n\r\n  'Flythrough': {\r\n    name: 'Flythrough',\r\n    duration: 8000,\r\n    easing: 'ease-in-out',\r\n    keyframes: [\r\n      { time: 0, position: { x: -20, y: 2, z: 0 }, target: { x: 0, y: 0, z: 0 } },\r\n      { time: 0.3, position: { x: -5, y: 8, z: 5 }, target: { x: 5, y: 0, z: 0 } },\r\n      { time: 0.7, position: { x: 5, y: 12, z: -5 }, target: { x: 0, y: 0, z: -10 } },\r\n      { time: 1, position: { x: 20, y: 2, z: 0 }, target: { x: 0, y: 0, z: 0 } }\r\n    ]\r\n  },\r\n\r\n  'Reveal': {\r\n    name: 'Reveal',\r\n    duration: 5000,\r\n    easing: 'ease-out',\r\n    keyframes: [\r\n      { time: 0, position: { x: 0, y: 0.5, z: 0 }, target: { x: 1, y: 0, z: 0 }, fov: 120 },\r\n      { time: 1, position: { x: 8, y: 6, z: 8 }, target: { x: 0, y: 0, z: 0 }, fov: 75 }\r\n    ]\r\n  }\r\n};\r\n\r\n/**\r\n * Camera utilities\r\n * 相机工具\r\n */\r\nexport class CameraUtils {\r\n  /**\r\n   * Update camera aspect ratio\r\n   * 更新相机宽高比\r\n   */\r\n  static updateAspectRatio(camera: THREE.Camera, width: number, height: number): void {\r\n    const aspect = width / height;\r\n    \r\n    if (camera instanceof THREE.PerspectiveCamera) {\r\n      camera.aspect = aspect;\r\n      camera.updateProjectionMatrix();\r\n    } else if (camera instanceof THREE.OrthographicCamera) {\r\n      const size = Math.abs(camera.top);\r\n      camera.left = -size * aspect;\r\n      camera.right = size * aspect;\r\n      camera.updateProjectionMatrix();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Position camera to look at target\r\n   * 定位相机以查看目标\r\n   */\r\n  static lookAt(camera: THREE.Camera, target: THREE.Vector3): void {\r\n    camera.lookAt(target);\r\n  }\r\n\r\n  /**\r\n   * Calculate camera distance from target\r\n   * 计算相机到目标的距离\r\n   */\r\n  static getDistanceToTarget(camera: THREE.Camera, target: THREE.Vector3): number {\r\n    return camera.position.distanceTo(target);\r\n  }\r\n\r\n  /**\r\n   * Frame object in camera view\r\n   * 在相机视图中框架对象\r\n   */\r\n  static frameObject(\r\n    camera: THREE.Camera, \r\n    object: THREE.Object3D, \r\n    fitRatio: number = 1.2\r\n  ): void {\r\n    const box = new THREE.Box3().setFromObject(object);\r\n    const size = box.getSize(new THREE.Vector3());\r\n    const center = box.getCenter(new THREE.Vector3());\r\n    \r\n    const maxSize = Math.max(size.x, size.y, size.z);\r\n    \r\n    if (camera instanceof THREE.PerspectiveCamera) {\r\n      const distance = maxSize / (2 * Math.tan(THREE.MathUtils.degToRad(camera.fov) / 2)) * fitRatio;\r\n      const direction = camera.position.clone().sub(center).normalize();\r\n      camera.position.copy(center).add(direction.multiplyScalar(distance));\r\n    } else if (camera instanceof THREE.OrthographicCamera) {\r\n      const distance = maxSize * fitRatio;\r\n      camera.zoom = 1 / fitRatio;\r\n      camera.updateProjectionMatrix();\r\n    }\r\n    \r\n    camera.lookAt(center);\r\n  }\r\n\r\n  /**\r\n   * Create camera from preset\r\n   * 从预设创建相机\r\n   */\r\n  static createFromPreset(presetName: string): THREE.Camera {\r\n    const config = CameraPresets[presetName];\r\n    if (!config) {\r\n      console.warn(`Camera preset '${presetName}' not found`);\r\n      return CameraFactory.createCamera(CameraPresets.DefaultPerspective);\r\n    }\r\n    \r\n    const camera = CameraFactory.createCamera(config);\r\n    \r\n    if (config.position) {\r\n      camera.position.set(config.position.x, config.position.y, config.position.z);\r\n    }\r\n    \r\n    if (config.rotation) {\r\n      camera.rotation.set(\r\n        THREE.MathUtils.degToRad(config.rotation.x),\r\n        THREE.MathUtils.degToRad(config.rotation.y),\r\n        THREE.MathUtils.degToRad(config.rotation.z)\r\n      );\r\n    }\r\n    \r\n    if (config.target) {\r\n      camera.lookAt(new THREE.Vector3(config.target.x, config.target.y, config.target.z));\r\n    }\r\n    \r\n    return camera;\r\n  }\r\n\r\n  /**\r\n   * Animate camera between two positions\r\n   * 在两个位置之间动画相机\r\n   */\r\n  static animateCamera(\r\n    camera: THREE.Camera,\r\n    fromConfig: CameraConfig,\r\n    toConfig: CameraConfig,\r\n    duration: number = 1000,\r\n    onComplete?: () => void\r\n  ): void {\r\n    const startTime = Date.now();\r\n    const startPos = camera.position.clone();\r\n    const endPos = new THREE.Vector3(\r\n      toConfig.position?.x || 0,\r\n      toConfig.position?.y || 0,\r\n      toConfig.position?.z || 0\r\n    );\r\n    \r\n    let startFOV = 75;\r\n    let endFOV = 75;\r\n    \r\n    if (camera instanceof THREE.PerspectiveCamera) {\r\n      startFOV = camera.fov;\r\n      endFOV = toConfig.fov || camera.fov;\r\n    }\r\n    \r\n    const animate = () => {\r\n      const elapsed = Date.now() - startTime;\r\n      const progress = Math.min(elapsed / duration, 1);\r\n      \r\n      // Ease in-out function\r\n      const eased = progress < 0.5 \r\n        ? 2 * progress * progress \r\n        : 1 - Math.pow(-2 * progress + 2, 3) / 2;\r\n      \r\n      // Interpolate position\r\n      camera.position.lerpVectors(startPos, endPos, eased);\r\n      \r\n      // Interpolate FOV for perspective cameras\r\n      if (camera instanceof THREE.PerspectiveCamera) {\r\n        camera.fov = THREE.MathUtils.lerp(startFOV, endFOV, eased);\r\n        camera.updateProjectionMatrix();\r\n      }\r\n      \r\n      // Look at target if specified\r\n      if (toConfig.target) {\r\n        camera.lookAt(new THREE.Vector3(toConfig.target.x, toConfig.target.y, toConfig.target.z));\r\n      }\r\n      \r\n      if (progress < 1) {\r\n        requestAnimationFrame(animate);\r\n      } else if (onComplete) {\r\n        onComplete();\r\n      }\r\n    };\r\n    \r\n    animate();\r\n  }\r\n\r\n  /**\r\n   * Get camera categories\r\n   * 获取相机分类\r\n   */\r\n  static getCameraCategories(): Record<string, string[]> {\r\n    return {\r\n      'Basic': ['DefaultPerspective', 'DefaultOrthographic'],\r\n      'Perspective': ['WideFOV', 'NarrowFOV', 'TelephotoLens', 'WideAngleLens'],\r\n      'Orthographic': ['TopDown', 'SideView', 'FrontView'],\r\n      'Cinematic': ['CinematicWide', 'CinematicStandard', 'Portrait'],\r\n      'Game': ['ThirdPerson', 'FirstPerson', 'IsometricGame'],\r\n      'Architectural': ['ArchViz', 'Interior']\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Export camera configuration\r\n   * 导出相机配置\r\n   */\r\n  static exportCameraConfig(camera: THREE.Camera): CameraConfig {\r\n    const config: CameraConfig = {\r\n      type: camera instanceof THREE.PerspectiveCamera ? 'perspective' : 'orthographic',\r\n      position: {\r\n        x: camera.position.x,\r\n        y: camera.position.y,\r\n        z: camera.position.z\r\n      },\r\n      rotation: {\r\n        x: THREE.MathUtils.radToDeg(camera.rotation.x),\r\n        y: THREE.MathUtils.radToDeg(camera.rotation.y),\r\n        z: THREE.MathUtils.radToDeg(camera.rotation.z)\r\n      }\r\n    };\r\n    \r\n    if (camera instanceof THREE.PerspectiveCamera) {\r\n      config.fov = camera.fov;\r\n      config.aspect = camera.aspect;\r\n      config.near = camera.near;\r\n      config.far = camera.far;\r\n    } else if (camera instanceof THREE.OrthographicCamera) {\r\n      config.size = Math.abs(camera.top);\r\n      config.aspect = Math.abs(camera.right / camera.top);\r\n      config.near = camera.near;\r\n      config.far = camera.far;\r\n    }\r\n    \r\n    return config;\r\n  }\r\n}","/**\r\n * @nova-engine/render-three - Three.js Rendering Adapter\r\n * Three.js渲染适配器 - 用于Nova引擎的Three.js渲染支持\r\n */\r\n\r\nexport const VERSION = '1.0.0';\r\nexport const MODULE_NAME = 'nova-ecs-render-three';\r\n\r\n// Core exports\r\nexport * from './components';\r\nexport * from './systems';\r\nexport * from './adapters';\r\n\r\n// Three.js specific exports\r\nexport * from './materials';\r\nexport * from './geometries';\r\nexport * from './lights';\r\nexport * from './cameras';"],"names":["Component","System","THREE","mergeGeometries","mergeVertices"],"mappings":"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"}